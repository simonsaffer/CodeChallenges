import scala.collection.mutable
import scala.collection.mutable.ListBuffer

/**
  * Created by simonsaffer on 2016-01-25.
  */
object LargestPermutation {

  def first[T](tuple: (T, T)) = tuple._1

  def main(args: Array[String]) {
    val sc = new java.util.Scanner(System.in);

    val N = sc.nextInt();
    val K = sc.nextInt();

    val numbers = new ListBuffer[(Int, Int)]();
    for (n <- 0 until N) numbers.append((sc.nextInt(), n));

    val pq = new mutable.PriorityQueue[(Int, Int)]()(Ordering by first);
    pq ++= numbers;

    var swaps = 0;
    while (swaps < K) {
      val highest = pq.dequeue();
      val tmp = numbers(swaps)._1;
      numbers(swaps) = highest;
      numbers(highest._2) = (tmp, highest._2);
      swaps += 1;
    }

    println(numbers.map(_._1).mkString(" "));
    println

  }

}
